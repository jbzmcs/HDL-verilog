$date
	Tue Oct 08 21:15:16 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mux4x1_tb $end
$var wire 1 ! Y_st $end
$var wire 1 " Y_df $end
$var wire 1 # Y_bh $end
$var reg 1 $ S0 $end
$var reg 1 % S1 $end
$var reg 1 & i0 $end
$var reg 1 ' i1 $end
$var reg 1 ( i2 $end
$var reg 1 ) i3 $end
$scope module mux_bh $end
$var wire 1 $ S0 $end
$var wire 1 % S1 $end
$var wire 1 & i0 $end
$var wire 1 ' i1 $end
$var wire 1 ( i2 $end
$var wire 1 ) i3 $end
$var reg 1 # Y $end
$upscope $end
$scope module mux_df $end
$var wire 1 $ S0 $end
$var wire 1 % S1 $end
$var wire 1 " Y $end
$var wire 1 & i0 $end
$var wire 1 ' i1 $end
$var wire 1 ( i2 $end
$var wire 1 ) i3 $end
$upscope $end
$scope module mux_st $end
$var wire 1 & i0 $end
$var wire 1 ' i1 $end
$var wire 1 ( i2 $end
$var wire 1 ) i3 $end
$var wire 1 $ s0 $end
$var wire 1 % s1 $end
$var wire 1 ! y $end
$var wire 1 * s1not $end
$var wire 1 + s0not $end
$var wire 1 , orB $end
$var wire 1 - orA $end
$var wire 1 . andH $end
$var wire 1 / andG $end
$var wire 1 0 andF $end
$var wire 1 1 andE $end
$var wire 1 2 andD $end
$var wire 1 3 andC $end
$var wire 1 4 andB $end
$var wire 1 5 andA $end
$scope module andA0 $end
$var wire 1 & a $end
$var wire 1 5 c $end
$var wire 1 * b $end
$upscope $end
$scope module andA1 $end
$var wire 1 ' a $end
$var wire 1 3 c $end
$var wire 1 * b $end
$upscope $end
$scope module andA2 $end
$var wire 1 ( a $end
$var wire 1 % b $end
$var wire 1 1 c $end
$upscope $end
$scope module andA3 $end
$var wire 1 ) a $end
$var wire 1 % b $end
$var wire 1 / c $end
$upscope $end
$scope module andB0 $end
$var wire 1 5 a $end
$var wire 1 4 c $end
$var wire 1 + b $end
$upscope $end
$scope module andB1 $end
$var wire 1 3 a $end
$var wire 1 $ b $end
$var wire 1 2 c $end
$upscope $end
$scope module andB2 $end
$var wire 1 1 a $end
$var wire 1 0 c $end
$var wire 1 + b $end
$upscope $end
$scope module andB3 $end
$var wire 1 / a $end
$var wire 1 $ b $end
$var wire 1 . c $end
$upscope $end
$scope module notA $end
$var wire 1 $ a $end
$var wire 1 + b $end
$upscope $end
$scope module notB $end
$var wire 1 % a $end
$var wire 1 * b $end
$upscope $end
$scope module or1 $end
$var wire 1 4 a $end
$var wire 1 2 b $end
$var wire 1 - c $end
$upscope $end
$scope module or2 $end
$var wire 1 0 a $end
$var wire 1 . b $end
$var wire 1 , c $end
$upscope $end
$scope module or3 $end
$var wire 1 - a $end
$var wire 1 , b $end
$var wire 1 ! c $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
15
14
03
02
01
00
0/
0.
1-
0,
1+
1*
0)
1(
0'
1&
0%
0$
1#
1"
1!
$end
#5
0"
0!
0-
0#
04
0+
1$
#10
1"
1!
1,
10
1#
11
05
1+
0$
0*
1%
#15
0"
0!
0,
0#
00
0+
1$
#20
